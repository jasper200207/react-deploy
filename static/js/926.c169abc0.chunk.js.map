{"version":3,"file":"static/js/926.c169abc0.chunk.js","mappings":"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","sources":["mocks/api/categories.mock.ts","mocks/api/products.mock.ts","mocks/api/user.mock.ts","mocks/api/wishes.mock.ts","mocks/browser.ts"],"sourcesContent":["import { rest } from 'msw';\n\nimport { getCategoriesPath } from '@/api/hooks/useGetCategories';\n\nconst MOCK_API_URL = 'http://dummy.api';\n\nexport const categoriesMockHandler = [\n  rest.get(MOCK_API_URL + getCategoriesPath(), (_, res, ctx) => {\n    return res(ctx.json(CATEGORIES_RESPONSE_DATA));\n  }),\n];\n\nconst CATEGORIES_RESPONSE_DATA = [\n  {\n    id: 2920,\n    name: '생일',\n    description: '감동을 높여줄 생일 선물 리스트',\n    color: '#5949a3',\n    imageUrl:\n      'https://img1.daumcdn.net/thumb/S104x104/?fname=https%3A%2F%2Ft1.daumcdn.net%2Fgift%2Fhome%2Ftheme%2F292020231106_MXMUB.png',\n  },\n  {\n    id: 2930,\n    name: '교환권',\n    description: '놓치면 후회할 교환권 특가',\n    color: '#9290C3',\n    imageUrl:\n      'https://img1.daumcdn.net/thumb/S104x104/?fname=https%3A%2F%2Fst.kakaocdn.net%2Fproduct%2Fgift%2Fproduct%2F20240131153049_5a22b137a8d346e9beb020a7a7f4254a.jpg',\n  },\n];\n","import { rest } from 'msw';\n\nimport { getProductsPath } from '@/api/hooks/useGetProducts';\nimport { getProductsDetailPath } from '@/api/hooks/useGetProductsDetail';\nimport { getProductsOptionPath } from '@/api/hooks/useGetProductsOption';\nimport type { ProductData } from '@/api/type';\n\nconst MOCK_API_URL = 'http://dummy.api';\n\nexport function getProductsById(id: number): ProductData | undefined {\n  return PRODUCTS_MOCK_DATA.content.find((product) => product.id === id);\n}\n\nexport const productsMockHandler = [\n  rest.get(MOCK_API_URL + getProductsPath({ categoryId: '2920' }), (_req, res, ctx) => {\n    return res(ctx.json(PRODUCTS_MOCK_DATA));\n  }),\n  rest.get(MOCK_API_URL + getProductsPath({ categoryId: '2930' }), (_req, res, ctx) => {\n    return res(ctx.json(PRODUCTS_MOCK_DATA));\n  }),\n  rest.get(MOCK_API_URL + getProductsDetailPath(':productsId'), (_req, res, ctx) => {\n    const productId = Number(_req.url.pathname.split('/').pop());\n\n    return res(ctx.json(PRODUCTS_MOCK_DATA.content.find((product) => product.id === productId)));\n  }),\n  rest.get(MOCK_API_URL + getProductsOptionPath(':productsId'), (_req, res, ctx) => {\n    return res(\n      ctx.json([\n        {\n          id: 1,\n          name: 'Option A',\n          quantity: 10,\n          productId: 1,\n        },\n        {\n          id: 2,\n          name: 'Option B',\n          quantity: 20,\n          productId: 1,\n        },\n      ]),\n    );\n  }),\n];\n\nconst PRODUCTS_MOCK_DATA = {\n  content: [\n    {\n      id: 3245119,\n      name: '[단독각인] 피렌체 1221 에디션 오드코롱 50ml (13종 택1)',\n      imageUrl:\n        'https://st.kakaocdn.net/product/gift/product/20240215083306_8e1db057580145829542463a84971ae3.png',\n      price: 145000,\n    },\n    {\n      id: 2263833,\n      name: '외식 통합권 10만원권',\n      imageUrl:\n        'https://st.kakaocdn.net/product/gift/product/20200513102805_4867c1e4a7ae43b5825e9ae14e2830e3.png',\n      price: 100000,\n    },\n    {\n      id: 6502823,\n      name: '[선물포장/미니퍼퓸증정] 디켄터 리드 디퓨저 300ml + 메세지카드',\n      imageUrl:\n        'https://st.kakaocdn.net/product/gift/product/20240215112140_11f857e972bc4de6ac1d2f1af47ce182.jpg',\n      price: 108000,\n    },\n    {\n      id: 1181831,\n      name: '[선물포장] 소바쥬 오 드 뚜왈렛 60ML',\n      imageUrl:\n        'https://st.kakaocdn.net/product/gift/product/20240214150740_ad25267defa64912a7c030a7b57dc090.jpg',\n      price: 122000,\n    },\n    {\n      id: 1379982,\n      name: '[정관장] 홍삼정 에브리타임 리미티드 (10ml x 30포)',\n      imageUrl:\n        'https://st.kakaocdn.net/product/gift/product/20240118135914_a6e1a7442ea04aa49add5e02ed62b4c3.jpg',\n      price: 133000,\n    },\n  ],\n  number: 0,\n  totalElements: 5,\n  size: 10,\n  last: true,\n};\n","import { LiveStorage } from '@mswjs/storage';\nimport { rest } from 'msw';\n\nimport { getRegisterPath } from '@/api/hooks/usePostRegister';\nimport type { PostLoginRequestBody, PostRegisterRequestBody } from '@/api/type';\n\nconst MOCK_API_URL = 'http://dummy.api';\n\ntype User = {\n  id: number;\n  email: string;\n  password: string;\n};\n\nconst USER_STORAGE = new LiveStorage<User[]>('userlist', [\n  {\n    id: 1,\n    email: 'test',\n    password: 'test',\n  },\n]);\n\nconst registerUser = (email: string, password: string) => {\n  const USERLIST = USER_STORAGE.getValue();\n  if (USERLIST.find((user) => user.email === email)) {\n    throw new Error('Invalid input');\n  } else {\n    USER_STORAGE.update((prev) => [\n      ...prev,\n      {\n        id: prev.length + 1,\n        email,\n        password,\n      },\n    ]);\n\n    const authToken = email;\n    return authToken;\n  }\n};\n\nconst loginUser = (email: string, password: string) => {\n  const USERLIST = USER_STORAGE.getValue();\n  const user = USERLIST.find((u) => u.email === email && u.password === password);\n\n  console.log(USERLIST);\n\n  if (!user) {\n    throw new Error('Invalid email or password');\n  }\n\n  const authToken = email;\n\n  return authToken;\n};\n\nexport const checkToken = (token: string): boolean => {\n  const USERLIST = USER_STORAGE.getValue();\n  return !!USERLIST.find((u) => u.email === token);\n};\n\nexport const userMockHandler = [\n  rest.post(MOCK_API_URL + getRegisterPath(), (req, res, ctx) => {\n    const { email, password } = req.body as PostRegisterRequestBody;\n\n    try {\n      const authToken = registerUser(email, password);\n      return res(ctx.status(201), ctx.json({ email, token: authToken }));\n    } catch (e) {\n      if (e instanceof Error) {\n        return res(ctx.status(400), ctx.json({ message: e.message }));\n      } else {\n        return res(ctx.status(500), ctx.json({ message: '알 수 없는 에러가 발생했습니다.' }));\n      }\n    }\n  }),\n  rest.post(MOCK_API_URL + '/api/login', (req, res, ctx) => {\n    const { email, password } = req.body as PostLoginRequestBody;\n\n    try {\n      const authToken = loginUser(email, password);\n      return res(ctx.status(200), ctx.json({ email, token: authToken }));\n    } catch (e) {\n      if (e instanceof Error) {\n        return res(ctx.status(403), ctx.json({ message: e.message }));\n      } else {\n        return res(ctx.status(500), ctx.json({ message: '알 수 없는 에러가 발생했습니다.' }));\n      }\n    }\n  }),\n];\n","import { LiveStorage } from '@mswjs/storage';\nimport { rest } from 'msw';\n\nimport { getDeleteWishesPath } from '@/api/hooks/useDeleteWishes';\nimport { getWishesPath } from '@/api/hooks/useGetWishes';\nimport { getPostWishesPath } from '@/api/hooks/usePostWishes';\nimport type { ProductData, WishesData } from '@/api/type';\nimport { getProductsById } from '@/mocks/api/products.mock';\nimport { checkToken } from '@/mocks/api/user.mock';\n\nconst MOCK_API_URL = 'http://dummy.api';\n\ntype Wishes = {\n  [key: string]: WishesData[];\n};\n\nconst WISHES_STORAGE = new LiveStorage<Wishes>('wishes', {});\nconst WISHES_LENGTH = new LiveStorage<number>('wishesLength', 0);\n\nconst addWishes = (userId: string, product: ProductData) => {\n  const wish: WishesData = {\n    id: WISHES_LENGTH.getValue() + 1,\n    product,\n  };\n\n  if (!WISHES_STORAGE.getValue()[userId]) {\n    WISHES_STORAGE.update((prev) => {\n      return {\n        ...prev,\n        [userId]: [],\n      };\n    });\n  }\n\n  WISHES_STORAGE.update((prev) => {\n    const prevWishes = prev[userId] || [];\n    return {\n      ...prev,\n      [userId]: [...prevWishes, wish],\n    };\n  });\n\n  WISHES_LENGTH.update((prev) => prev + 1);\n};\n\nconst deleteWishes = (userId: string, wishId: number) => {\n  WISHES_STORAGE.update((prev) => {\n    const prevWishes = prev[userId] || [];\n    return {\n      ...prev,\n      [userId]: prevWishes.filter((wish) => wish.id !== wishId),\n    };\n  });\n};\n\nconst getWishes = (userId: string) => {\n  console.log(WISHES_STORAGE.getValue()[userId]);\n  return WISHES_STORAGE.getValue()[userId] || [];\n};\n\nexport const wishesMockHandler = [\n  rest.post(MOCK_API_URL + getPostWishesPath(), (req, res, ctx) => {\n    const token = req.headers.get('authorization') || '';\n\n    if (checkToken(token)) {\n      const { productId } = req.body as { productId: number };\n\n      const product = getProductsById(productId);\n\n      if (!product) {\n        return res(ctx.status(404), ctx.json({ message: 'Member or Product not found' }));\n      }\n\n      if (WISHES_STORAGE.getValue()[token]?.find((w) => w.product.id === product.id)) {\n        return res(ctx.status(409), ctx.json({ message: 'Already added to wish list' }));\n      }\n\n      addWishes(token, product);\n      return res(ctx.status(201));\n    } else {\n      return res(ctx.status(401), ctx.json({ message: 'Invalid or missing token' }));\n    }\n  }),\n  rest.get(MOCK_API_URL + getWishesPath({}), (req, res, ctx) => {\n    const token = req.headers.get('authorization') || '';\n\n    if (checkToken(token)) {\n      return res(\n        ctx.json({\n          content: getWishes(token),\n          last: true,\n          totalElements: WISHES_LENGTH.getValue(),\n          totalPages: 1,\n          size: 10,\n          number: 0,\n          first: true,\n          numberOfElements: 1,\n          empty: false,\n        }),\n      );\n    } else {\n      return res(ctx.status(401), ctx.json({ message: 'Invalid or missing token' }));\n    }\n  }),\n  rest.delete(MOCK_API_URL + getDeleteWishesPath(), (req, res, ctx) => {\n    const token = req.headers.get('authorization') || '';\n    const { wishId } = req.params as { wishId: string };\n\n    if (checkToken(token)) {\n      deleteWishes(token, parseInt(wishId));\n      return res(ctx.status(204));\n    } else {\n      return res(ctx.status(401), ctx.json({ message: 'Invalid or missing token' }));\n    }\n  }),\n];\n","import { setupWorker } from 'msw';\n\nimport { categoriesMockHandler } from '@/mocks/api/categories.mock';\nimport { productsMockHandler } from '@/mocks/api/products.mock';\nimport { userMockHandler } from '@/mocks/api/user.mock';\nimport { wishesMockHandler } from '@/mocks/api/wishes.mock';\n\nexport const browserWorker = setupWorker(\n  ...categoriesMockHandler,\n  ...productsMockHandler,\n  ...userMockHandler,\n  ...wishesMockHandler,\n);\n"],"names":["categoriesMockHandler","rest","get","getCategoriesPath","_","res","ctx","json","CATEGORIES_RESPONSE_DATA","id","name","description","color","imageUrl","MOCK_API_URL","productsMockHandler","getProductsPath","categoryId","_req","PRODUCTS_MOCK_DATA","getProductsDetailPath","productId","Number","url","pathname","split","pop","content","find","product","getProductsOptionPath","quantity","price","number","totalElements","size","last","USER_STORAGE","LiveStorage","email","password","checkToken","token","getValue","u","userMockHandler","post","getRegisterPath","req","body","authToken","registerUser","user","Error","update","prev","length","status","e","message","loginUser","USERLIST","console","log","WISHES_STORAGE","WISHES_LENGTH","wishesMockHandler","getPostWishesPath","headers","_WISHES_STORAGE$getVa","w","addWishes","userId","wish","prevWishes","getWishesPath","totalPages","first","numberOfElements","empty","delete","getDeleteWishesPath","wishId","params","deleteWishes","filter","parseInt","browserWorker","setupWorker"],"sourceRoot":""}